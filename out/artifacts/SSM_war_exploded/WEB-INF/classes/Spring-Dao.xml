<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.acompe.Mapper" />

    <!--读取外部配置文件，需要使用context与context约束-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--引入Spring-JDBC数据源，通过外部文件进行配置-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>

    <!--配置SqlSessionFactory数据工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--配置数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--设置配置文件-->
        <property name="configLocation" value="classpath:MyBatis-config.xml"/>
    </bean>

    <!--    方式一，通过继承SqlSessionDaoSupport，注入sqlSessionFactory，实现Impl的增删该查    -->
    <!--    对SqlSessionDaoSupport的类进行注入                                              -->
    <!--    <bean id="userDao" class="com.acompe.Mapper.UserMapperImpl">                  -->
    <!--        <property name="sqlSessionFactory" ref="sqlSessionFactory" />             -->
    <!--    </bean>                                                                       -->


    <!--    方式二，通过SqlSessionTemplate创建线程安全的SqlSesion，将其注入bean中，随时使用-->

    <!--    以一种安全的SqlSession注入到Bean中，则使用时直接拿即可                        -->
    <!--    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">    -->
    <!--        <constructor-arg index="0" ref="sqlSessionFactory" />               -->
    <!--    </bean>                                                                 -->


    <!--    方式三， 根据方式二，由于sqlSession为线程安全，可直接注入到Service中           -->
    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.acompe.Mapper.UserMapper" />
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

    <!-- 将MyBatis的事务交由Spring事务管理器进行管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg ref="dataSource" />
    </bean>

    <!--    将Mapper在bean中设置，开启自动导入功能，一般都在MyBatis-Config中进行配置       -->

    <!--    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">        -->
    <!--    通过配置文件配置SqlSessionFacotry的名字，由MyBatis自动获取该bean             -->
    <!--    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>  -->
    <!--    配置自动扫描的包                                                          -->
    <!--    <property name="basePackage" value="com.acompe.Mapper"/>                -->
    <!--    </bean>                                                                 -->


</beans>